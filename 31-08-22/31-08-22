133) Get the 2nd highest salary of an employee.

Ans: select min(salary) 
    -> from (
    -> select *
    -> from employee
    -> order by salary desc
    -> limit 2
    -> ) AS s;

+-------------+
| min(salary) |
+-------------+
|       50000 |
+-------------+

135) Get the employee’s first name and last name in separate lines.

Ans: select e_name from employee UNION select e_id from employee;

+-----------+
| e_name    |
+-----------+
| uvesh     |
| shruti    |
| setu      |
| sanket    |
| ramesh    |
| mahesh    |
| suresh    |
| himesh    |
| Aditi     |
| Akash     |
| Anand     |
| Arnav     |
| Archana   |
| Arnav     |
| Kabir     |
| Padma     |
| sabir     |
| sonu      |
| saheba    |
| Akash     |
| neha      |
| sneha     |
| sadakat   |
| Rabia     |
| Pooja     |
| Deep      |
| Arjun     |
| Keshav    |
| khalid    |
| saurabh   |
| shubham   |
| Mahesh    |
| karun     |
| raghav    |
| Bharatwaj |
| poojan    |
| pramod    |
| joh%      |
| 1         |
| 2         |
| 3         |
| 4         |
| 5         |
| 6         |
| 7         |
| 8         |
| 9         |
| 10        |
| 11        |
| 12        |
| 13        |
| 14        |
| 15        |
| 16        |
| 17        |
| 18        |
| 19        |
| 20        |
| 21        |
| 22        |
| 23        |
| 24        |
| 25        |
| 26        |
| 27        |
| 28        |
| 29        |
| 30        |
| 31        |
| 32        |
| 33        |
| 34        |
| 35        |
| 36        |
| 37        |
| 38        |
+-----------+

136) Get the list of the 3 most populated cities.

Ans: select * from cities order by population desc limit 3;

+----+----------+------------+---------+------------+
| id | name     | population | surface | city_state |
+----+----------+------------+---------+------------+
|  1 | New York |     463333 | 15.3167 | 01         |
|  3 | Buffalo  |     402356 | 10.1235 | 01         |
|  2 | Albany   |     391234 | 16.9966 | 01         |
+----+----------+------------+---------+------------+

137) Get the list of the 3 cities with the smallest surface.

Ans: select * from cities order by surface limit 3;

+----+---------------+------------+---------+------------+
| id | name          | population | surface | city_state |
+----+---------------+------------+---------+------------+
|  4 | San Bruno     |     153233 | 9.22147 | 02         |
|  3 | Buffalo       |     402356 | 10.1235 | 01         |
|  5 | SAN-Francisco |     205689 | 11.9963 | 02         |
+----+---------------+------------+---------+------------+

138) Get the list of states whose department number starts with “97”.

Ans: select * from states where state_code like '97%';

+----+------------+------------+
| id | state_code | state_name |
+----+------------+------------+
|  5 | 978        | Florida    |
|  6 | 971        | Indiana    |
+----+------------+------------+

139. Get the names of the 3 most populated cities, as well as the name of the associated state.

Ans: select * from cities LEFT JOIN states ON state_code = city_state ORDER BY population DESC LIMIT 3;

+----+----------+------------+---------+------------+------+------------+------------+
| id | name     | population | surface | city_state | id   | state_code | state_name |
+----+----------+------------+---------+------------+------+------------+------------+
|  1 | New York |     463333 | 15.3167 | 01         |    1 | 01         | New York   |
|  3 | Buffalo  |     402356 | 10.1235 | 01         |    1 | 01         | New York   |
|  2 | Albany   |     391234 | 16.9966 | 01         |    1 | 01         | New York   |
+----+----------+------------+---------+------------+------+------------+------------+

140) Get the list of the name of each State, associated with its code and the number of cities within these States, by sorting in order to get in priority the States which have the largest number of cities.

Ans: select state_name, city_state,count(*) AS number_cities from cities LEFT JOIN states ON state_code = city_state group by city_state order by number_cities desc;

+------------+------------+---------------+
| state_name | city_state | number_cities |
+------------+------------+---------------+
| New York   | 01         |             3 |
| California | 02         |             3 |
| Texas      | 03         |             1 |
| Illinois   | 04         |             1 |
+------------+------------+---------------+

141) Get the list of the 3 largest States, in terms of surface area.

Ans: SELECT state_name, city_state, SUM(`surface`) AS state_surface 
    -> FROM `cities` 
    -> LEFT JOIN states ON state_code = city_state
    -> GROUP BY city_state
    -> ORDER BY state_surface DESC
    -> LIMIT 3;

+------------+------------+--------------------+
| state_name | city_state | state_surface      |
+------------+------------+--------------------+
| New York   | 01         | 42.436750411987305 |
| California | 02         |  41.11229991912842 |
| Illinois   | 04         | 22.012500762939453 |
+------------+------------+--------------------+

142) Count the number of cities whose names begin with “San”.

Ans: select count(*) from cities where name like 'San%';

+----------+
| count(*) |
+----------+
|        3 |
+----------+

143) Get the list of cities whose surface is greater than the average surface.

Ans: select * from cities where surface > (select avg(surface) from cities);

+----+-----------+------------+---------+------------+
| id | name      | population | surface | city_state |
+----+-----------+------------+---------+------------+
|  2 | Albany    |     391234 | 16.9966 | 01         |
|  6 | SAN-Diego |     269988 | 19.8945 | 02         |
|  7 | Houston   |     197009 |      18 | 03         |
|  8 | Chicago   |     239878 | 22.0125 | 04         |
+----+-----------+------------+---------+------------+

144) Get the list of States with more than 1 million residents.

Ans: select city_state,sum(population) AS city_population from cities group by  city_state having city_population > 1000000 order by city_population desc;

+------------+-----------------+
| city_state | city_population |
+------------+-----------------+
| 01         |         1256923 |
+------------+-----------------+

145) Replace the dashes with a blank space, for all cities beginning with “SAN-” (inside the column containing the upper case names).

Ans: UPDATE `cities` 
    -> SET name = REPLACE(name, '-', ' ') 
    -> WHERE `name` LIKE 'SAN-%';

select * from cities;

+----+---------------+------------+---------+------------+
| id | name          | population | surface | city_state |
+----+---------------+------------+---------+------------+
|  1 | New York      |     463333 | 15.3167 | 01         |
|  2 | Albany        |     391234 | 16.9966 | 01         |
|  3 | Buffalo       |     402356 | 10.1235 | 01         |
|  4 | San Bruno     |     153233 | 9.22147 | 02         |
|  5 | SAN Francisco |     205689 | 11.9963 | 02         |
|  6 | SAN Diego     |     269988 | 19.8945 | 02         |
|  7 | Houston       |     197009 |      18 | 03         |
|  8 | Chicago       |     239878 | 22.0125 | 04         |
+----+---------------+------------+---------+------------+

146) Get the user with the first name “Ivan” and the password “password2”, considering that the encoding of the password is done with the Sha1 algorithm.

Ans: select * from customer where firstname = 'Ivan' AND password = SHA1("password2");

+----+-----------+----------+----------------------+-------------+------------------------------------------+
| id | firstname | lastname | email                | city        | password                                 |
+----+-----------+----------+----------------------+-------------+------------------------------------------+
|  2 | Ivan      | Martinez | Martinez@example.com | Los Angeles | 2AA60A8FF7FCD473D321E0146AFD9E26DF395147 |
+----+-----------+----------+----------------------+-------------+------------------------------------------+

147) Get the list of all products that are present on several orders.

Ans: SELECT name, COUNT(*) AS nbr_items 
    -> FROM `orderLine` 
    -> GROUP BY name
    -> HAVING nbr_items > 1
    -> ORDER BY nbr_items DESC;

+------------+-----------+
| name       | nbr_items |
+------------+-----------+
| Product X9 |         3 |
| Product X1 |         2 |
| Product X4 |         2 |
| Product X5 |         2 |
+------------+-----------+

148) Get the list of all the products that are present on several orders and add a column that lists the id of the associated orders.

Ans: SELECT name, COUNT(*) AS nbr_items , GROUP_CONCAT(`order_id`) AS  order_list
    -> FROM `orderLine` 
    -> GROUP BY name
    -> HAVING nbr_items > 1
    -> ORDER BY nbr_items DESC;

+------------+-----------+------------+
| name       | nbr_items | order_list |
+------------+-----------+------------+
| Product X9 |         3 | 4,4,5      |
| Product X1 |         2 | 1,1        |
| Product X4 |         2 | 2,3        |
| Product X5 |         2 | 7,7        |
+------------+-----------+------------+

149. Store the total price within each order line, based on the unit price and quantity.

Ans: update orderLine set total_price = (quantity * unit_price);
Query OK, 20 rows affected (0.063 sec)
Rows matched: 20  Changed: 20  Warnings: 0

select * from orderLine;

+----+----------+-------------+----------+------------+-------------+
| id | order_id | name        | quantity | unit_price | total_price |
+----+----------+-------------+----------+------------+-------------+
|  1 |        1 | Product X1  |       20 |      12.87 |       257.4 |
|  2 |        1 | Product X1  |        5 |      30.14 |       150.7 |
|  3 |        1 | Product X2  |        6 |      17.48 |      104.88 |
|  4 |        2 | Product X3  |       10 |      33.99 |       339.9 |
|  5 |        2 | Product X4  |       16 |       6.94 |      111.04 |
|  6 |        3 | Product X4  |       17 |      10.92 |      185.64 |
|  7 |        3 | Product X6  |        8 |      15.69 |      125.52 |
|  8 |        4 | Product X8  |       20 |      32.15 |         643 |
|  9 |        4 | Product X9  |        4 |      60.96 |      243.84 |
| 10 |        4 | Product X9  |        9 |      21.88 |      196.92 |
| 11 |        5 | Product X9  |        2 |       6.13 |       12.26 |
| 12 |        5 | Product X7  |       10 |      13.22 |       132.2 |
| 13 |        6 | Product X10 |        6 |      66.86 |      401.16 |
| 14 |        6 | Product X11 |        6 |      86.93 |      521.58 |
| 15 |        7 | Product X5  |       22 |      30.07 |      661.54 |
| 16 |        7 | Product X5  |        7 |      15.65 |      109.55 |
| 17 |        8 | Product X15 |       13 |      66.55 |      865.15 |
| 18 |        9 | Product X20 |        9 |     230.13 |     2071.17 |
| 19 |        9 | Product X19 |       10 |     200.93 |      2009.3 |
| 20 |       10 | Product X30 |        2 |      23.31 |       46.62 |
+----+----------+-------------+----------+------------+-------------+

150) Get the total price for each order and the date associated with that order as well as the first and last name of the associated customer.                                      

Ans: SELECT customer.firstname, customer.lastname, orders.purchase_date, order_id, SUM(total_price) AS order_price 
    -> FROM `orderLine` 
    -> LEFT JOIN orders ON orders.id = orderLine.order_id
    -> LEFT JOIN customer ON customer.id = orders.customer_id
    -> GROUP BY `order_id`;

+-----------+----------+---------------+----------+--------------------+
| firstname | lastname | purchase_date | order_id | order_price        |
+-----------+----------+---------------+----------+--------------------+
| Crystal   | Dowd     | 2022-01-01    |        1 |  512.9799880981445 |
| Dominique | McCollum | 2022-01-03    |        2 | 450.94002532958984 |
| Carrie    | Garver   | 2022-01-04    |        3 | 311.15999603271484 |
| Wallace   | Williams | 2022-01-07    |        4 |  1083.759994506836 |
| Maurice   | Janice   | 2022-01-08    |        5 | 144.45999717712402 |
| Patrick   | Nicholas | 2022-01-09    |        6 |  922.7400207519531 |
| Ivan      | Martinez | 2022-01-10    |        7 |   771.089973449707 |
| William   | Hyman    | 2022-01-11    |        8 |  865.1500244140625 |
| Maria     | Jamerson | 2022-01-11    |        9 | 4080.4698486328125 |
| Crystal   | Dowd     | 2020-01-11    |       10 | 46.619998931884766 |
+-----------+----------+---------------+----------+--------------------+
					
